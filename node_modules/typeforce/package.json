{
  "_args": [
    [
      {
        "raw": "typeforce@^1.11.3",
        "scope": null,
        "escapedName": "typeforce",
        "name": "typeforce",
        "rawSpec": "^1.11.3",
        "spec": ">=1.11.3 <2.0.0",
        "type": "range"
      },
      "/home/auxesis/Documents/parin/btctest/node_modules/bitcoinjs-lib"
    ]
  ],
  "_from": "typeforce@>=1.11.3 <2.0.0",
  "_id": "typeforce@1.12.0",
  "_inCache": true,
  "_location": "/typeforce",
  "_nodeVersion": "8.8.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/typeforce-1.12.0.tgz_1510614687469_0.7739418761339039"
  },
  "_npmUser": {
    "name": "dcousens",
    "email": "npm@dcousens.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "typeforce@^1.11.3",
    "scope": null,
    "escapedName": "typeforce",
    "name": "typeforce",
    "rawSpec": "^1.11.3",
    "spec": ">=1.11.3 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/bitcoinjs-lib"
  ],
  "_resolved": "https://registry.npmjs.org/typeforce/-/typeforce-1.12.0.tgz",
  "_shasum": "ca40899919f1466d7819e37be039406beb912a2e",
  "_shrinkwrap": null,
  "_spec": "typeforce@^1.11.3",
  "_where": "/home/auxesis/Documents/parin/btctest/node_modules/bitcoinjs-lib",
  "author": {
    "name": "Daniel Cousens"
  },
  "bugs": {
    "url": "https://github.com/dcousens/typeforce/issues"
  },
  "dependencies": {},
  "description": "Another biased type checking solution for Javascript",
  "devDependencies": {
    "nyc": "^6.4.0",
    "standard": "^9.0.0",
    "tap-dot": "^1.0.5",
    "tape": "^4.6.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-fvnkvueAOFLhtAqDgIA/wMP21SMwS/NQESFKZuwVrj5m/Ew6eK2S0z0iB++cwtROPWDOhaT6OUfla8UwMw4Adg==",
    "shasum": "ca40899919f1466d7819e37be039406beb912a2e",
    "tarball": "https://registry.npmjs.org/typeforce/-/typeforce-1.12.0.tgz"
  },
  "files": [
    "errors.js",
    "extra.js",
    "index.js",
    "native.js"
  ],
  "gitHead": "6ea1b97b95ea5967ad970f7af341b19f16487f93",
  "homepage": "https://github.com/dcousens/typeforce",
  "keywords": [
    "typeforce",
    "types",
    "typechecking",
    "type",
    "exceptions",
    "force"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "dcousens",
      "email": "email@dcousens.com"
    }
  ],
  "name": "typeforce",
  "optionalDependencies": {},
  "readme": "# typeforce\n[![build status](https://secure.travis-ci.org/dcousens/typeforce.png)](http://travis-ci.org/dcousens/typeforce)\n[![Version](https://img.shields.io/npm/v/typeforce.svg)](https://www.npmjs.org/package/typeforce)\n\nAnother biased type checking solution for Javascript.\n\nException messages may change between patch versions,  as often the patch will change some behaviour that was unexpected and naturally it results in a different error message.\n\n## Examples\n\n``` javascript\nvar typeforce = require('typeforce')\n\nvar element = { prop: 'foo' }\nvar elementNumber = { prop: 2 }\nvar array = [element, element, elementNumber]\n\n// supported primitives 'Array', 'Boolean', 'Buffer', 'Number', 'Object', 'String'\ntypeforce('Array', array)\n\ntypeforce('Number', array)\n// TypeError: Expected Number, got Array\n\n// array types\ntypeforce(['Object'], array)\ntypeforce(typeforce.arrayOf('Object'), array)\n\n// supports recursive type templating\ntypeforce({ prop: 'Number' }, elementNumber)\n\n// maybe types\ntypeforce('?Number', 2)\ntypeforce('?Number', null)\ntypeforce(typeforce.maybe(typeforce.Number), 2)\ntypeforce(typeforce.maybe(typeforce.Number), null)\n\n// sum types\ntypeforce(typeforce.oneOf('String', 'Number'))\n\n// value types\ntypeforce(typeforce.value(3.14), 3.14)\n\n// custom types\nfunction LongString (value, strict) {\n  if (!typeforce.String(value)) return false\n  if (value.length !== 32) return false\n  return true\n}\n\ntypeforce(LongString, '00000000000000000000000000000000')\n// => OK!\n\ntypeforce(LongString, 'not long enough')\n// TypeError: Expected LongString, got String 'not long enough'\n```\n\n**Pro**tips:\n``` javascript\n// use precompiled primitives for high performance\ntypeforce(typeforce.Array, array)\n\n// or just precompile a template\nvar type = {\n  foo: 'Number',\n  bar: '?String'\n}\n\nvar fastType = typeforce.compile(type)\n// fastType => typeforce.object({\n//   foo: typeforce.Number,\n//   bar: typeforce.maybe(typeforce.String)\n// })\n\n// use strictness for recursive types to enforce whitelisting properties\ntypeforce({\n  x: 'Number'\n}, { x: 1 }, true)\n// OK!\n\ntypeforce({\n  x: 'Number'\n}, { x: 1, y: 2 }, true)\n// TypeError: Unexpected property 'y' of type Number\n```\n\n**Pro**tips (extended types):\n``` javascript\ntypeforce(typeforce.tuple('String', 'Number'), ['foo', 1])\n// OK!\n\ntypeforce(typeforce.tuple('Number', 'Number'), ['not a number', 1])\n// TypeError: Expected property \"0\" of type Number, got String 'not a number'\n\ntypeforce(typeforce.map('Number'), {\n  'anyKeyIsOK': 1\n})\n// OK!\n\ntypeforce(typeforce.map('Number', typeforce.HexN(8)), {\n  'deadbeef': 1,\n  'ffff0000': 2\n})\n// OK!\n\nfunction Foo () {\n  this.x = 2\n}\n\ntypeforce(typeforce.quacksLike('Foo'), new Foo())\n// OK!\n\n// Note, any Foo will do\ntypeforce(typeforce.quacksLike('Foo'), new (function Foo() {}))\n// OK!\n```\n\n**WARNING**: Be very wary of using the `quacksLike` type, as it relies on the `Foo.name` property.\nIf that property is mangled by a transpiler,  such as `uglifyjs`,  you will have a bad time.\n\n## LICENSE [ISC](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/dcousens/typeforce.git"
  },
  "scripts": {
    "coverage": "nyc --check-coverage --branches 100 --functions 100 node test/*.js",
    "standard": "standard",
    "test": "npm run standard && npm run unit",
    "unit": "node test/*.js | tap-dot"
  },
  "version": "1.12.0"
}
